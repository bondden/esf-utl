{"version":3,"sources":["index.es7.js"],"names":[],"mappings":"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","file":"index.es7.js","sourcesContent":["/**\n * Created by Denis Bondarenko <bond.den@gmail.com> on 25.05.2015.\n */\n\n'use strict';\nconst\n  cc    =require('cli-color'),\n  fs    =require('fs'),\n  path  =require('path'),\n  os    =require('os'),\n  cirJsn=require('circular-json')\n  ;\n\nexport class Utl{\n\n  static get logFile(){\n    return path.resolve(`${os.tmpdir()}/e.log`);\n  }\n\n  static get styles(){\n    return {\n      ne: cc.white,\n      er: cc.red,\n      ok: cc.green,\n      em: cc.yellow,\n      erb:cc.redBright,\n      sh: cc.whiteBright,\n\n      b: cc.blue,\n      bb:cc.blueBright,\n      y: cc.yellow,\n      yb:cc.yellowBright,\n      g: cc.green,\n      gb:cc.greenBright,\n      c: cc.cyan,\n      cb:cc.cyanBright,\n      m: cc.magenta,\n      mb:cc.magentaBright,\n      r: cc.red,\n      rb:cc.redBright,\n      w: cc.white,\n      wb:cc.whiteBright\n    };\n  }\n\n  /**\n   * FFS = for file system\n   * @return {string} - current Date-Time formatted like 0000-00-00_00-00-00\n   */\n  static getCurrentDateFmtFFS(){\n    //add zero\n    function aZ(v){\n      return (v<10)?`0${v}`: v;\n    }\n\n    let d=new Date();\n    return d.getFullYear()+'-'+aZ(d.getMonth()+1)+'-'+aZ(d.getDate())+'_'+aZ(d.getHours())+'-'+aZ(d.getMinutes())+'-'+aZ(d.getSeconds());\n  }\n\n  /**\n   * Returns current date, formatted for log()\n   * @return {string} - formatted date\n   */\n  static getCurrentDateFmtLog(){\n    let d=new Date();\n    return d.toISOString().replace(/[a-z]+|\\..+$/ig,' ');\n  }\n\n  /**\n   * Strips all contiguous slashes off the input end\n   * @param {string} pathName    - string path\n   * @return {XML|string|void|*} - input string without ending slashes \n   */\n  static stripSlash(pathName){\n    return pathName.replace(/\\/+$/,'');\n  }\n\n  /**\n   * Transforms a path string to absolute relatively __dirname or dirname + additional `rel` path\n   * @param {String} p - a path string to be transformed\n   * @param {String} [rel] - additional relative path between the __dirname of context and `p`\n   * @returns {String} - absolute path\n   */\n  static absolutizePath(p,rel=''){\n    if(!path.isAbsolute(p)){\n      p=path.resolve(__dirname+rel+p).replace(/\\\\/ig,'/');\n    }\n    return p;\n  }\n\n  /**\n   * Filters out sensitive information from log, using key names\n   * @param {String} s - unfiltered string\n   * @returns {*}      - filtered string\n   */\n  static logFilter(s){\n    \n    const\n      censorNote  ='FILTERED',\n      censoredKeys=[\n        'pass',\n        'password',\n        'userPass',\n        'userPassword',\n        'token'\n      ]\n      ;\n    \n    s=(s+'').replace(\n      new RegExp(`\"(${censoredKeys.join('|')})\"[\\s\\t\\r\\n  ]*:[\\s\\t\\r\\n  ]*\"([^\"]+)\"`,\"ig\"),\n      `\"$1\":\"${censorNote}\"`\n    );\n\n    return s;\n    \n  }\n\n  /**\n   * Asynchronously logs messages to file in os tmp folder and optionally to console\n   * @param {string|any}  msg     - message\n   * @param {string}      style   - style, one of Utl.styles\n   * @param {boolean}     silent  - if true, don't output to stdout\n   * @return {void}\n   */\n  static log(\n    msg='\\n',\n    style='ne',\n    silent=false\n  ){\n\n    //todo: transfer settings to log for a) defining a log file, b) setting logging on/off\n    //todo: clearLog method\n    //if(!settings.log)return; //\n\n    let apx='';\n\n    //set console style style\n    if(msg instanceof Error){\n      style='er';\n      apx  =Utl.stringifyJSON(msg.stack);\n    }\n\n    //set log format\n    if(typeof msg==='object'){\n      msg=Utl.stringifyJSON(msg);\n      if(apx){\n        msg+=apx;\n      }\n    }\n\n    msg=Utl.logFilter(msg);\n    \n    let msgFmt=`${Utl.getCurrentDateFmtLog()}:  ${msg}`;\n\n    fs.appendFile(\n      Utl.logFile,\n      msgFmt,\n      e=>{\n        if(e) throw e;\n      }\n    );\n\n    if(!silent){\n      console.log(Utl.styles[style](`e: ${msgFmt}`));\n    }\n\n  }\n\n  /**\n   * Universal ESF-projects-wide Promises error handler\n   * @param {number|string} num - error number\n   * @param {string}        msg - custom message\n   * @param {Error}         err - custom error object\n   * @param {function}      rej - Promise reject handler function\n   * @param {boolean}       thr - throw: if true - then let throw the Error, set with above params\n   * @returns {Error}           - error object\n   */\n  static rejectingError(\n    num=0,\n    msg='',\n    err=null,\n    rej=null,\n    thr=false\n  ){\n\n    if(msg){\n      msg=': '+msg+'\\n';\n    }else{\n      msg='\\n';\n    }\n\n    let sfx='';\n    if(err){\n      sfx=`\n        ${err}\n        ${err.stack}\n      `;\n    }\n\n    msg=`${Error} ${__filename} #${num} ${msg}: ${sfx}`;\n\n    Utl.log(msg,'er');\n\n    err=new Error(msg);\n\n    if(rej){\n      rej(err);\n    }\n\n    if(thr){\n      throw err;\n    }\n\n    return err;\n\n  }\n\n  /**\n   * Capitalizes the first letter of a string\n   * @param {string} s - a string\n   * @returns {string|*} - capitalized string\n   */\n  static capitalize(s){\n    s=s.toLowerCase();\n    let a=s.split(/[^a-zA-Z0-9]+/g);\n    a=a.map((v)=>{\n      let aa=v.split('');\n      aa[0] =aa[0].toUpperCase();\n      return aa.join('');\n    });\n    s    =a.join('');\n    return s;\n  }\n\n  /**\n   * Stringifies an object, stripping off circular structures\n   * Wrapper over circular-json with preset ESF formatting style\n   * @param {object|*} o - input data\n   * @returns {string}   - stringified JSON\n   */\n  static stringifyJSON(o){\n    return cirJsn.stringify(o,null,'  ','[Circular]');\n  }\n\n}\n"],"sourceRoot":"/source/"}